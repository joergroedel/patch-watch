#!/usr/bin/env python
#

import ConfigParser
import subprocess
import fnmatch
import getopt
import string
import json
import sys
import sets
import os

config_dir   = '~/.patches/'
watches_file = '~/.patches/config'
filter_file  = '~/.patches/filters'
git          = '/usr/bin/git'

watches = ConfigParser.RawConfigParser();

filters = [ ]

def load_maint_file(file_name):
	maintainers = list();

	if (not os.path.isfile(file_name)):
		print "No such file " + file_name;
		return list();

	store = False;
	fd = open(file_name, 'r');
	for line in fd:
		line = line.strip();
		if (len(line) == 0):
			continue;
		if (line[0] == '#'):
			continue;
		pos = line.find(':');
		if (pos == -1):
			if (store == True):
				maintainers.append(item);
			store = True;
			item = dict();
			item['name']    = line;
			item['mail']    = list();
			item['pattern'] = list();
			item['commits'] = list();
		elif (store == True):
			tag, value = line.split(':',1);
			tag        = tag.strip();
			value      = value.strip();
			if (tag == 'F'):
				item['pattern'].append(value);
			elif (tag == 'M'):
				item['mail'].append(value);
	fd.close();
	if (store == True):
		maintainers.append(item);

	return maintainers;

def is_git_commit(token):
	if (len(token) != 40):
		return False;
	for c in token:
		f = string.find(string.hexdigits, c);
		if f == -1:
			return False;

	return True;

def process_line(line, data):
	tokens = line.split(' ');
	for token in tokens:
		token = token.strip(' \t\r:;.,<>[]()-_=+~')
		if is_git_commit(token):
			data.append(token);
	return

def parse_commit_list(lines):
	data = list();
	for line in lines:
		process_line(line, data);

	return data;

def load_commit_list(file_name):
	if (len(file_name) > 0):
		file_name = os.path.expanduser(file_name);
		fd = open(file_name, 'r');
	else:
		fd = sys.stdin;

	lines = list();
	for line in fd:
		line = line.strip();
		lines.append(line);
	fd.close()

	return parse_commit_list(lines);

def load_black_list(file_name):
	ret = list();
	if (os.path.isfile(file_name)):
		return read_db_file(file_name);
	else:
		return list();

def match_commit(item, commits, blacklist, match_set):
	if (len(item['refs']) == 0):
		return False;
	commit = item['id'].upper();
	if commit in commits:
		return False;
	if commit in blacklist:
		return False;
	if len(match_set) > 0:
		for match_tag in match_set:
			found = False;
			for tag in item['tags']:
				if (match_tag.upper() == tag.upper()):
					found = True;
			if (found == False):
				return False;
	for ref in item['refs']:
		ref_commit = ref.upper();
		if ref_commit in commits:
			return True;
	return False;

def load_filters(file_name):
	file_name = os.path.expanduser(file_name)
	fd = open(file_name, 'r')
	for line in fd:
		line = line.strip()
		if len(line) < 1 or line[0] == '#':
			continue
		if (not os.path.isfile(line)) or (not os.access(line, os.X_OK)):
			print "Warning: Filter does not exist or is not executable: " + line
			continue
		filters.append(line)
	if (len(filters) == 0):
		print "Warning: No valid filters found"
	fd.close()
	return

def create_config_dir():
	try:
		real_path = os.path.expanduser(config_dir)
		os.mkdir(real_path)
	except OSError:
		pass

def load_watches(file_name, watches):
	file_name = os.path.expanduser(file_name);
	if not os.path.isfile(file_name):
		return;
	watches.read(file_name);
	return;

def store_watches(file_name, watches):
	create_config_dir();
	file_name = os.path.expanduser(file_name)
	with open(file_name, 'w') as cfg_file:
		watches.write(cfg_file);
	return;

def parse_markers(output):
	ret = sets.Set([ ])
	lines = output.split('\n')
	for line in lines:
		line    = line.strip()
		markers = line.split(' ')
		for mark in markers:
			mark = mark.strip()
			if (len(mark) > 0):
				ret.add(mark)
	return ret

def apply_filters(commit):
	markers = sets.Set([ ])
	for f in filters:
		output = subprocess.check_output([f, commit]).strip()
		markers.update(parse_markers(output))

	return markers;

def print_commit(commit, subject, markers):
	if (len(markers) == 0):
		return
	mark_str = ''
	for mark in markers:
		mark_str += " [" + mark + "]"
	print "Commit: " + commit + " Subject: " + subject + " Tags: " + mark_str
	return

def make_dict(commit, subject, markers):
	d = dict();
	d['id']      = commit;
	d['subject'] = subject;
	tags  = list();
	refs  = list();
	paths = list();
	for mark in markers:
		pos = mark.find(':');
		if (pos == -1):
			tags.append(mark.strip());
			continue;
		t, v = mark.split(':', 1);
		if t == 'git':
			refs.append(v);
		elif t == 'path':
			paths.append(v);
	d['tags'] = tags;
	d['refs'] = refs;
	d['paths'] = paths;
	return d;

def process_commits(lines, progress=False):
	data = list();

	current = 0;
	number  = len(lines);
	for line in lines:
		if progress:
			current += 1;
			percent = float(current) / float(number);
			message = '\rProcessing {c}/{n} ({p:.2%} done)'.format(c=current, n=number, p=percent);
			print message,

		line = line.strip();
		if line == '':
			continue
		commit, subject = line.split(' ', 1);
		markers = apply_filters(commit);
		data.append(make_dict(commit, subject, markers));

	return data;

def write_db_file(file_name, data):
	file_name = os.path.expanduser(file_name);
	with open(file_name, 'w') as db_file:
		json.dump(data, db_file, indent=8);
	return;

def read_db_file(file_name):
	file_name = os.path.expanduser(file_name);
	with open(file_name, 'r') as db_file:
		data = json.load(db_file);
	return data;

def do_init(argv):
	if len(argv) != 2:
		print "Init needs 2 arguments: name base";
		return 1;

	name = argv.pop(0);
	base = argv.pop(0);

	if (watches.has_section(name)):
		print name + " already exists";
		return 1;

	db_file = config_dir + name + '.json'
	output = subprocess.check_output([git, 'log', '--format=%H %s', base + '~1..' + base]);
	data = process_commits(output.split('\n'));
	write_db_file(db_file, data);

	watches.add_section(name);
	watches.set(name, 'database', db_file)

	store_watches(watches_file, watches);

	return 0;

def do_update(argv):

	if len(argv) < 1:
		print "Update needs database as parameter"
		return 1;
	name = argv.pop(0);

	head = 'HEAD';
	if len(argv) > 0:
		head = argv.pop(0);

	if not watches.has_section(name):
		print "Unknown database: " + name;
		return 1;

	db_file = watches.get(name, 'database');
	data = read_db_file(db_file);
	last_commit = data[len(data)-1]['id'];

	output = subprocess.check_output([git, 'log', '--reverse', '--no-merges', '-s', '--format=%H %s', last_commit + ".." + head])
	ndata = process_commits(output.split('\n'), progress=True);

	write_db_file(db_file, data + ndata);

	return 0;

def match_file_pattern(maint, item):
	for pattern in maint['pattern']:
		for path in item['paths']:
			if (fnmatch.fnmatch(path, pattern)):
				return True;

	return False;

def add_item_to_maintainer(maintainers, item):
	for maintainer in maintainers:
		if (match_file_pattern(maintainer, item)):
			maintainer['commits'].append(item);
			return;

	return

def print_item_list(results, committers, indent=''):
	for item in results:
		people_set = set()
		people     = '';
		for ref in item['refs']:
			if ref.upper() in committers:
				people_set.add(committers[ref.upper()]);
		for p in people_set:
			people += " " + p;
		print '{0}{1} {2} ({3})'.format(indent, item['id'], item['subject'], people.strip());

def print_maintainers(maintainers, committers):
	for maint in maintainers:
		if (len(maint['commits']) == 0):
			continue;
		print maint['name'];
		print_item_list(maint['commits'], committers, indent="        ");
		print;

	return;

def do_match(argv):
	try:
		opts, args = getopt.getopt(argv, 't:bg');
	except getopt.GetoptError, err:
		print str(err);
		return 1;

	no_blacklist = False;
	no_grouping  = False;
	match_tags   = list();

	for o, a in opts:
		if o == '-t':
			match_tags.append(a);
		elif o == '-b':
			no_blacklist = True;
		elif o == '-g':
			no_grouping  = True;
		else:
			assert False;

	if len(args) < 1:
		print "Match needs database as parameter"
		return 1;
	name = args.pop(0);

	match_set = set();
	for tag in match_tags:
		match_set.add(tag);

	if not watches.has_section(name):
		print "Unknown database: " + name;
		return 1;

	db_file = watches.get(name, 'database');
	data    = read_db_file(db_file);

	if (not watches.has_option(name, 'commit-list')):
		print "No commit-list available for " + name;
		return 1;

	commit_file = watches.get(name, 'commit-list');
	commit_list = read_db_file(commit_file);

	commit_set = set();
	committers = dict();
	for c in commit_list:
		commit_set.add(c['id'].upper());
		committers[c['id'].upper()] = c['committer'];

	if (no_blacklist == False and watches.has_option(name, 'blacklist')):
		bl = load_black_list(watches.get(name, 'blacklist'));
	else:
		bl = list()

	bl_set = set();
	for c in bl:
		bl_set.add(c.upper());

	use_maintainers = False;
	if (no_grouping == False and watches.has_option(name, 'maintainers')):
		file_name = watches.get(name, 'maintainers');
		file_name = os.path.expanduser(file_name);
		maintainers = load_maint_file(file_name);
		use_maintainers = True;
	else:
		results = list();

	for item in data:
		if not match_commit(item, commit_set, bl_set, match_set):
			continue;

		if (use_maintainers):
			add_item_to_maintainer(maintainers, item);
		else:
			results.append(item);

	if (use_maintainers):
		print_maintainers(maintainers, committers);
	else:
		print_item_list(results, committers);

	return 0;

def save_commit_list(name, commits):
	file_name = os.path.expanduser(config_dir + name + "-commits.json");

	with open(file_name, 'w') as fd:
		json.dump(commits, fd, indent=8);

	watches.set(name, "commit-list", file_name);
	store_watches(watches_file, watches);

def do_commit_list(argv):
	if len(argv) < 1:
		print "commit-list needs database and (optional) file as parameter";
		return 1;

	name = argv.pop(0);

	if not watches.has_section(name):
		print "Unknown database: " + name;
		return 1;

	file_name = "";
	if (len(argv) > 0):
		file_name = argv.pop(0);

	data = load_commit_list(file_name);
	print 'Loaded {0} commit-ids from list'.format(len(data));

	commits = list();
	for item in data:
		commit = dict();
		commit['id'] = item;
		commit['committer'] = 'Unknown';
		commits.append(commit);

	save_commit_list(name, commits);

	return 0;

def find_committer(line):
	domains = set(['suse.de', 'suse.cz', 'suse.com', 'novell.com']);
	tokens = line.split(' ');
	for item in tokens:
		item = item.strip(' <>\t\n\r');
		pos = item.find('@');
		if (pos == -1):
			continue;
		account, domain = item.split('@', 1);
		if (domain in domains):
			return item;

	return '';

def parse_patch_file(file_name):
	fd = open(file_name, 'r');
	temp_list = list();
	committer = 'Unknown';
	for line in fd:
		parts = line.split(':');
		if (len(parts) < 2):
			continue;
		token = parts.pop(0);
		token = token.upper();
		if (token == 'GIT-COMMIT'):
			for token in parts:
				token = token.strip();
				if is_git_commit(token):
					temp_list.append(token);
					break;
		if (token == 'SIGNED-OFF-BY' or token == 'ACKED-BY'):
			email = find_committer(parts.pop(0));
			if (len(email) > 0):
				committer = email;
				continue;

	fd.close();

	ret = list();
	for item in temp_list:
		commit = dict();
		commit['id'] = item;
		commit['committer'] = committer;
		ret.append(commit);

	return ret;

def do_commit_series(argv):
	if len(argv) < 1:
		print "commit-series needs database and (optional) file as parameter";
		return 1;

	name = argv.pop(0);

	if not watches.has_section(name):
		print "Unknown database: " + name;
		return 1;

	if (len(argv) < 1):
		series_file = "series.conf";
	else:
		series_file = argv.pop(0);

	fd = open(series_file, 'r');
	patch_files = list();

	for line in fd:
		line = line.strip();
		if (len(line) == 0 or line[0] == '#'):
			continue;
		parts = line.split(' ');
		for part in parts:
			if os.path.isfile(part):
				patch_files.append(part);
				break;

	fd.close();

	commits = list();
	for patch in patch_files:
		commits += parse_patch_file(patch);

	print 'Loaded {0} commit-ids from {1} patch files'.format(len(commits), len(patch_files));
	save_commit_list(name, commits);

	return 0;

def do_black_list(argv):
	if len(argv) < 1:
		print "commit-list needs database and (optional) file as parameter";
		return 1;

	name = argv.pop(0);

	if not watches.has_section(name):
		print "Unknown database: " + name;
		return 1;

	if watches.has_option(name, 'blacklist'):
		bl_file_name = watches.get(name, 'blacklist');
	else:
		bl_file_name = os.path.expanduser(config_dir + name + '-blacklist.json');

	bl = load_black_list(bl_file_name);

	bl += parse_commit_list(argv);
	print 'Blacklisting {0} commits'.format(len(bl));

	write_db_file(bl_file_name, bl);

	watches.set(name, 'blacklist', bl_file_name);
	store_watches(watches_file, watches);

	return 0;

def print_cmds():
	print "Available commands:"
	print "  init,i           Initialize a commit tracking database"
	print "  update,up        Update a commit tracking database"
	print "  match,m          Match commits in a database against a commit list"
	print "  commit-list,cl   Set commit list file for a tracking database"
	print "  commit-series,cs Find commit list from a series.conf file"
	print "  black-list,bl    Add commits to the blacklist for a database"
	return 0

def main():
	sys.argv.pop(0)

	load_filters(filter_file)
	load_watches(watches_file, watches);

	if (len(sys.argv) >= 1):
		cmd = sys.argv.pop(0)
	else:
		cmd = '';

	if (cmd == 'update' or cmd == 'up'):
		return do_update(sys.argv)
	elif (cmd == 'init' or cmd == 'i'):
		return do_init(sys.argv);
	elif (cmd == 'match' or cmd == 'm'):
		return do_match(sys.argv);
	elif (cmd == 'commit-list' or cmd == 'cl'):
		return do_commit_list(sys.argv);
	elif (cmd == 'commit-series' or cmd == 'cs'):
		return do_commit_series(sys.argv);
	elif (cmd == 'black-list' or cmd == 'bl'):
		return do_black_list(sys.argv);
	else:
	 	return print_cmds()

if __name__ == '__main__':
	ret = main()
	if (ret > 255):
		ret = 1
	sys.exit(ret)

